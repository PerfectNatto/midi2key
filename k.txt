package com.example.myapp

import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import org.pytorch.IValue
import org.pytorch.Module
import org.pytorch.Tensor
import java.io.File

class MainActivity : AppCompatActivity() {

    companion object {
        private const val TAG = "PyTorchMobile"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        // モデルのロード（PyTorch Android 2.1.0 では Module.load を使用）
        val model = loadModelFromAssets("model.pt")
        
        // 入力データ作成: 形状 [1, 2, 44100]
        val inputShape = longArrayOf(1, 2, 44100)
        val numElements = inputShape.reduce { acc, l -> acc * l }.toInt()
        val inputData = FloatArray(numElements) { 0.0f }
        
        // 入力テンソル作成
        val inputTensor = Tensor.fromBlob(inputData, inputShape)
        
        // 推論実行
        val outputTensor = model.forward(IValue.from(inputTensor)).toTensor()
        
        // 出力結果のログ出力（shape と最初の要素）
        Log.i(TAG, "Output Tensor Shape: ${outputTensor.shape.contentToString()}")
        val outputData = outputTensor.dataAsFloatArray
        if (outputData.isNotEmpty()) {
            Log.i(TAG, "First element of output: ${outputData[0]}")
        }
    }

    // assets からモデルファイルを読み込むヘルパー関数（Module.load を使用）
    private fun loadModelFromAssets(assetName: String): Module {
        return Module.load(assetFilePath(assetName))
    }

    // assets 内のファイルをファイルシステムにコピーしてパスを取得するユーティリティ関数
    private fun assetFilePath(assetName: String): String {
        val file = File(filesDir, assetName)
        if (!file.exists() || file.length() == 0L) {
            assets.open(assetName).use { inputStream ->
                file.outputStream().use { outputStream ->
                    inputStream.copyTo(outputStream)
                }
            }
        }
        return file.absolutePath
    }
}
