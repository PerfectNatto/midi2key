#include <ncnn/net.h>
#include <android/asset_manager_jni.h>

static ncnn::Net net;

extern "C" JNIEXPORT jboolean JNICALL
Java_com_example_app_Native_init(JNIEnv* env, jobject thiz, jobject assetMgr)
{
    ncnn::create_gpu_instance();                 // Vulkan デバイス列挙
    net.opt.use_vulkan_compute = true;           // ★GPU を使う
    net.opt.use_fp16_packed   = true;            // 端末が対応すれば fp16
    AAssetManager* mgr = AAssetManager_fromJava(env, assetMgr);
    int ret1 = net.load_param(mgr, "model.param");
    int ret2 = net.load_model(mgr, "model.bin");
    return (ret1 == 0 && ret2 == 0);
}

extern "C" JNIEXPORT jfloatArray JNICALL
Java_com_example_app_Native_forward(JNIEnv* env, jobject thiz, jfloatArray buf,
                                    jint w, jint h)
{
    // 入力を ncnn::Mat に詰める
    jfloat* ptr = env->GetFloatArrayElements(buf, 0);
    ncnn::Mat in = ncnn::Mat::from_pixels(ptr, ncnn::Mat::PIXEL_RGB, w, h);
    env->ReleaseFloatArrayElements(buf, ptr, 0);

    ncnn::Extractor ex = net.create_extractor();
    ex.input("data", in);

    ncnn::Mat out;
    ex.extract("prob", out);

    // out を Java に返すなど
}

extern "C" JNIEXPORT void JNICALL
Java_com_example_app_Native_release(JNIEnv*, jobject)
{
    net.clear();
    ncnn::destro
