    const char* p = env->GetStringUTFChars(jPath, nullptr);
    std::string path(p);  env->ReleaseStringUTFChars(jPath, p);

    float in[4];  env->GetFloatArrayRegion(jIn, 0, 4, in);

    static Ort::Env ort(ORT_LOGGING_LEVEL_WARNING, "ort");
    Ort::SessionOptions opts;
    Ort::ThrowOnError(OrtSessionOptionsAppendExecutionProvider_Nnapi(opts, 0));  // ‚Üê NNAPI

    Ort::Session session(ort, path.c_str(), opts);

    constexpr int64_t dims[2] = {1, 4};
    Ort::MemoryInfo mem = Ort::MemoryInfo::CreateCpu(OrtArenaAllocator, OrtMemTypeDefault);
    Ort::Value x = Ort::Value::CreateTensor<float>(mem, in, 4, dims, 2);

    const char* in_names[]  = {"input"};
    const char* out_names[] = {"output"};
    auto y = session.Run(Ort::RunOptions{nullptr}, in_names, &x, 1, out_names, 1);

    float* out = y[0].GetTensorMutableData<float>();
    jfloatArray ret = env->NewFloatArray(4);
    env->SetFloatArrayRegion(ret, 0, 4, out);
    return ret;
